kind: pipeline
type: kubernetes
name: dug_build

steps:
- name: build #Doesnt currently do any testing...
  image: mcr.microsoft.com/dotnet/sdk:5.0
  commands:
  - dotnet build -c Release ./cli

- name: prepare_publishing
  image: mcr.microsoft.com/dotnet/sdk:5.0
  commands:
  - echo "Publishing tagged version ${DRONE_TAG}"
  - sed -i 's~<Version>0.0.1</Version>~<Version>${DRONE_TAG}</Version>~' ./cli/dug.csproj #Set the Version in the csproj, its the only way to get the packaging tools to respect the version.
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - build

- name: package linux
  image: mcr.microsoft.com/dotnet/sdk:5.0
  commands:
  - dotnet publish -r linux-x64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:PublishReadyToRun=true --self-contained true -o publish ./cli
  - mv ./publish/dug ./publish/dug-linux-x64 #Rename the binary to its architecture type
  - dotnet publish -r linux-arm64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:PublishReadyToRun=true --self-contained true -o publish ./cli
  - mv ./publish/dug ./publish/dug-linux-arm64 #Rename the binary to its architecture type
  - dotnet tool restore
  - dotnet deb -c Release -r linux-x64 -o ./publish ./cli/dug.csproj
  - dotnet deb -c Release -r linux-arm64 -o ./publish ./cli/dug.csproj
  - dotnet rpm -c Release -r linux-x64 -o ./publish ./cli/dug.csproj
  - dotnet tarball -c Release -r linux-x64 -o ./publish ./cli/dug.csproj
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - prepare_publishing

- name: build win-x64
  image: mcr.microsoft.com/dotnet/sdk:5.0
  commands:
  - sed -i 's~<version>0.0.1</version>~<version>${DRONE_TAG}</version>~' ./.ci/win/dug.nuspec #Set the Version in the nuspec
  - dotnet publish -r win-x64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true --self-contained true -o ./.ci/win/output ./cli
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - prepare_publishing

- name: package/publish win-x64
  image: linuturk/mono-choco
  environment:
    CHOCO_API_KEY:
      from_secret: chocolatey_api_key
  failure: ignore #Until my first chocolatey package (dug@0.0.1) get approved this will always fail
  commands:
  - choco pack ./.ci/win/dug.nuspec --out ./.ci/win
  - choco push ./.ci/win/dug.${DRONE_TAG}.nupkg --api-key $${CHOCO_API_KEY} --source https://push.chocolatey.org/
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - build win-x64

- name: build osx-x64
  image: mcr.microsoft.com/dotnet/sdk:5.0
  commands:
  - dotnet publish -r osx-x64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true --self-contained true -o publish ./cli
  - mv ./publish/dug ./publish/dug-osx-x64 #Rename the binary to its architecture type
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - prepare_publishing

- name: package/publish npm
  image: node:10
  environment:
    NPM_TOKEN_1:
      from_secret: npm_token_1
    # NPM_TOKEN_2:
    #   from_secret: npm_token_2
  commands:
  # - npm set //https://registry.npmjs.org/npm/:_authToken $${NPM_TOKEN_1}
  # - npm set //registry.npmjs.org/npm/:_authToken $${NPM_TOKEN_1}
  - npm set //registry.npmjs.org/:_authToken $${NPM_TOKEN_1}
  - sed -i '0,/0.0.1/s//${DRONE_TAG}/' ./.ci/npm_packaging/package.json #Set the Version in the package.json (this sed syntax just updates the first match it finds)
  - npm publish ./.ci/npm_packaging
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - build win-x64
  - package linux

- name: github release
  image: plugins/github-release
  settings:
    api_key:
      from_secret: github_token
    files:
      - publish/dug-linux-x64
      - publish/dug-linux-arm64
      - publish/dug-osx-x64
      - .ci/win/dug.${DRONE_TAG}.nupkg
      - ./cli/publish/*.deb
      - ./cli/publish/*.rpm
      - ./cli/publish/*.tar.gz
      - ./.ci/win/output/*.exe
    title: ${DRONE_TAG}
    prerelease: true
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - build win-x64
  - package linux
  - build osx-x64
